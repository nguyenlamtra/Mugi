// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Mugi.Core;
using Mugi.Domain.Entities;
using System;

namespace Mugi.Core.Migrations
{
    [DbContext(typeof(MugiStoreDbContext))]
    [Migration("20171119024637_FinalDb")]
    partial class FinalDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Mugi.Domain.Entities.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("RoleId");

                    b.Property<string>("UserName")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasAlternateKey("UserName");

                    b.HasIndex("RoleId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Mugi.Domain.Entities.Advertisement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<DateTime>("EndDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("StaffId");

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("Url")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("StaffId");

                    b.ToTable("Advertisements");
                });

            modelBuilder.Entity("Mugi.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CategoryDescription")
                        .IsUnicode(true);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<bool>("IsDeleted");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Mugi.Domain.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccountId");

                    b.Property<string>("Address");

                    b.Property<int>("Gender");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Mail")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Phone")
                        .HasMaxLength(11);

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Mugi.Domain.Entities.GoodsReceipt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ShopOrderId");

                    b.Property<int>("StaffId");

                    b.HasKey("Id");

                    b.HasIndex("StaffId");

                    b.ToTable("GoodsReceipts");
                });

            modelBuilder.Entity("Mugi.Domain.Entities.GoodsReceiptProduct", b =>
                {
                    b.Property<int>("GoodsReceiptId");

                    b.Property<int>("ProductId");

                    b.Property<int>("PriceInsert");

                    b.HasKey("GoodsReceiptId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("GoodsReceiptProducts");
                });

            modelBuilder.Entity("Mugi.Domain.Entities.GoodsReceiptSubProduct", b =>
                {
                    b.Property<int>("GoodsReceiptId");

                    b.Property<int>("SubProductId");

                    b.Property<int>("Quantity");

                    b.HasKey("GoodsReceiptId", "SubProductId");

                    b.HasIndex("SubProductId");

                    b.ToTable("GoodsReceiptSubProducts");
                });

            modelBuilder.Entity("Mugi.Domain.Entities.ImageProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ProductId");

                    b.Property<string>("Url")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ImageProducts");
                });

            modelBuilder.Entity("Mugi.Domain.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<DateTime?>("CompleteDate");

                    b.Property<int?>("CompleteId");

                    b.Property<DateTime?>("ConfirmDate");

                    b.Property<int?>("ConfirmId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("CustomerId");

                    b.Property<int?>("DeliverId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("PaymentType")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(11);

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("Total");

                    b.HasKey("Id");

                    b.HasIndex("CompleteId");

                    b.HasIndex("ConfirmId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DeliverId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Mugi.Domain.Entities.OrderProduct", b =>
                {
                    b.Property<int>("ProductId");

                    b.Property<int>("OrderId");

                    b.Property<int>("Price");

                    b.HasKey("ProductId", "OrderId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderProducts");
                });

            modelBuilder.Entity("Mugi.Domain.Entities.OrderSubProduct", b =>
                {
                    b.Property<int>("SubProductId");

                    b.Property<int>("OrderId");

                    b.Property<int>("Quantity");

                    b.HasKey("SubProductId", "OrderId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderSubProducts");
                });

            modelBuilder.Entity("Mugi.Domain.Entities.PriceDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("Price");

                    b.Property<int>("ProductId");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("PriceDetails");
                });

            modelBuilder.Entity("Mugi.Domain.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description")
                        .IsUnicode(true);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(true);

                    b.Property<int>("SubCategoryId");

                    b.Property<int>("SupplierId");

                    b.HasKey("Id");

                    b.HasIndex("SubCategoryId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Mugi.Domain.Entities.Promotion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("BeginDay");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("EndDay");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("PromotionPercent");

                    b.Property<int>("StaffId");

                    b.HasKey("Id");

                    b.HasIndex("StaffId");

                    b.ToTable("Promotions");
                });

            modelBuilder.Entity("Mugi.Domain.Entities.PromotionProduct", b =>
                {
                    b.Property<int>("ProductId");

                    b.Property<int>("PromotionId");

                    b.HasKey("ProductId", "PromotionId");

                    b.HasIndex("PromotionId");

                    b.ToTable("PromotionProducts");
                });

            modelBuilder.Entity("Mugi.Domain.Entities.Property", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("PropertyName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Propertys");
                });

            modelBuilder.Entity("Mugi.Domain.Entities.PropertyDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("PropertyId");

                    b.Property<string>("PropertyValue")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.ToTable("PropertyDetails");
                });

            modelBuilder.Entity("Mugi.Domain.Entities.PropertyDetailsSubProduct", b =>
                {
                    b.Property<int>("PropertyDetailsId");

                    b.Property<int>("SubProductId");

                    b.HasKey("PropertyDetailsId", "SubProductId");

                    b.HasIndex("SubProductId");

                    b.ToTable("PropertyDetailsSubProducts");
                });

            modelBuilder.Entity("Mugi.Domain.Entities.PropertyProducts", b =>
                {
                    b.Property<int>("ProductId");

                    b.Property<int>("PropertyId");

                    b.HasKey("ProductId", "PropertyId");

                    b.HasIndex("PropertyId");

                    b.ToTable("PropertyProducts");
                });

            modelBuilder.Entity("Mugi.Domain.Entities.ReturnProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("OrderId");

                    b.Property<string>("Reason");

                    b.Property<int?>("StaffId");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("StaffId");

                    b.ToTable("ReturnProducts");
                });

            modelBuilder.Entity("Mugi.Domain.Entities.ReturnProductSubProduct", b =>
                {
                    b.Property<int>("ReturnProductId");

                    b.Property<int>("SubProductId");

                    b.Property<int>("Quantity");

                    b.HasKey("ReturnProductId", "SubProductId");

                    b.HasIndex("SubProductId");

                    b.ToTable("ReturnProductSubProducts");
                });

            modelBuilder.Entity("Mugi.Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Mugi.Domain.Entities.ShopOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDate");

                    b.Property<int>("GoodsReceiptId");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("SupplierId");

                    b.HasKey("Id");

                    b.HasIndex("GoodsReceiptId");

                    b.HasIndex("SupplierId");

                    b.ToTable("ShopOrders");
                });

            modelBuilder.Entity("Mugi.Domain.Entities.ShopOrderProduct", b =>
                {
                    b.Property<int>("ProductId");

                    b.Property<int>("ShopOrderId");

                    b.HasKey("ProductId", "ShopOrderId");

                    b.HasIndex("ShopOrderId");

                    b.ToTable("ShopOrderProducts");
                });

            modelBuilder.Entity("Mugi.Domain.Entities.ShopOrderSubProduct", b =>
                {
                    b.Property<int>("SubProductId");

                    b.Property<int>("ShopOrderId");

                    b.Property<int>("Quantity");

                    b.HasKey("SubProductId", "ShopOrderId");

                    b.HasIndex("ShopOrderId");

                    b.ToTable("ShopOrderSubProducts");
                });

            modelBuilder.Entity("Mugi.Domain.Entities.Staff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccountId");

                    b.Property<string>("Address");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Mail")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Phone")
                        .HasMaxLength(11);

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Staffs");
                });

            modelBuilder.Entity("Mugi.Domain.Entities.SubCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CategoryId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("SubCategoryDescription")
                        .IsUnicode(true);

                    b.Property<string>("SubCategoryName")
                        .IsRequired()
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("SubCategories");
                });

            modelBuilder.Entity("Mugi.Domain.Entities.SubProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ProductId");

                    b.Property<int>("ProductLeft");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("SubProducts");
                });

            modelBuilder.Entity("Mugi.Domain.Entities.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("Mugi.Domain.Entities.Account", b =>
                {
                    b.HasOne("Mugi.Domain.Entities.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Mugi.Domain.Entities.Advertisement", b =>
                {
                    b.HasOne("Mugi.Domain.Entities.Staff", "Staff")
                        .WithMany("Advertisements")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Mugi.Domain.Entities.Customer", b =>
                {
                    b.HasOne("Mugi.Domain.Entities.Account", "Account")
                        .WithMany("Customers")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Mugi.Domain.Entities.GoodsReceipt", b =>
                {
                    b.HasOne("Mugi.Domain.Entities.Staff", "Staff")
                        .WithMany("GoodsReceipts")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Mugi.Domain.Entities.GoodsReceiptProduct", b =>
                {
                    b.HasOne("Mugi.Domain.Entities.GoodsReceipt", "GoodsReceipt")
                        .WithMany("GoodsReceiptProducts")
                        .HasForeignKey("GoodsReceiptId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mugi.Domain.Entities.Product", "Product")
                        .WithMany("GoodsReceiptProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Mugi.Domain.Entities.GoodsReceiptSubProduct", b =>
                {
                    b.HasOne("Mugi.Domain.Entities.GoodsReceipt", "GoodsReceipt")
                        .WithMany("GoodsReceiptSubProducts")
                        .HasForeignKey("GoodsReceiptId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mugi.Domain.Entities.SubProduct", "SubProduct")
                        .WithMany("GoodsReceiptSubProducts")
                        .HasForeignKey("SubProductId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Mugi.Domain.Entities.ImageProduct", b =>
                {
                    b.HasOne("Mugi.Domain.Entities.Product", "Product")
                        .WithMany("ImageProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Mugi.Domain.Entities.Order", b =>
                {
                    b.HasOne("Mugi.Domain.Entities.Staff", "Complete")
                        .WithMany("CompleteOrders")
                        .HasForeignKey("CompleteId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mugi.Domain.Entities.Staff", "Confirm")
                        .WithMany("ConfirmOrders")
                        .HasForeignKey("ConfirmId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mugi.Domain.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mugi.Domain.Entities.Staff", "Deliver")
                        .WithMany("DeliverOrders")
                        .HasForeignKey("DeliverId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Mugi.Domain.Entities.OrderProduct", b =>
                {
                    b.HasOne("Mugi.Domain.Entities.Order", "Order")
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mugi.Domain.Entities.Product", "Product")
                        .WithMany("OrderProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Mugi.Domain.Entities.OrderSubProduct", b =>
                {
                    b.HasOne("Mugi.Domain.Entities.Order", "Order")
                        .WithMany("OrderSubProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mugi.Domain.Entities.SubProduct", "SubProduct")
                        .WithMany("OrderSubProducts")
                        .HasForeignKey("SubProductId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Mugi.Domain.Entities.PriceDetails", b =>
                {
                    b.HasOne("Mugi.Domain.Entities.Product", "Product")
                        .WithMany("PriceDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Mugi.Domain.Entities.Product", b =>
                {
                    b.HasOne("Mugi.Domain.Entities.SubCategory", "SubCategory")
                        .WithMany("Products")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mugi.Domain.Entities.Supplier", "Supplier")
                        .WithMany("Products")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Mugi.Domain.Entities.Promotion", b =>
                {
                    b.HasOne("Mugi.Domain.Entities.Staff", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Mugi.Domain.Entities.PromotionProduct", b =>
                {
                    b.HasOne("Mugi.Domain.Entities.Product", "Product")
                        .WithMany("PromotionProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mugi.Domain.Entities.Promotion", "Promotion")
                        .WithMany("PromotionProducts")
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Mugi.Domain.Entities.PropertyDetails", b =>
                {
                    b.HasOne("Mugi.Domain.Entities.Property", "Property")
                        .WithMany("PropertyDetails")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Mugi.Domain.Entities.PropertyDetailsSubProduct", b =>
                {
                    b.HasOne("Mugi.Domain.Entities.PropertyDetails", "PropertyDetails")
                        .WithMany("PropertyDetailsSubProducts")
                        .HasForeignKey("PropertyDetailsId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mugi.Domain.Entities.SubProduct", "SubProduct")
                        .WithMany("PropertyDetailsSubProducts")
                        .HasForeignKey("SubProductId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Mugi.Domain.Entities.PropertyProducts", b =>
                {
                    b.HasOne("Mugi.Domain.Entities.Product", "Product")
                        .WithMany("PropertyProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mugi.Domain.Entities.Property", "Property")
                        .WithMany("PropertyProducts")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Mugi.Domain.Entities.ReturnProduct", b =>
                {
                    b.HasOne("Mugi.Domain.Entities.Order", "Order")
                        .WithMany("ReturnProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mugi.Domain.Entities.Staff", "Staff")
                        .WithMany("ReturnProducts")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Mugi.Domain.Entities.ReturnProductSubProduct", b =>
                {
                    b.HasOne("Mugi.Domain.Entities.ReturnProduct", "ReturnProduct")
                        .WithMany("ReturnProductSubProducts")
                        .HasForeignKey("ReturnProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mugi.Domain.Entities.SubProduct", "SubProduct")
                        .WithMany("ReturnProductSubProducts")
                        .HasForeignKey("SubProductId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Mugi.Domain.Entities.ShopOrder", b =>
                {
                    b.HasOne("Mugi.Domain.Entities.GoodsReceipt", "GoodsReceipt")
                        .WithMany("ShopOrders")
                        .HasForeignKey("GoodsReceiptId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mugi.Domain.Entities.Supplier", "Supplier")
                        .WithMany("ShopOrders")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Mugi.Domain.Entities.ShopOrderProduct", b =>
                {
                    b.HasOne("Mugi.Domain.Entities.Product", "Product")
                        .WithMany("ShopOrderProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mugi.Domain.Entities.ShopOrder", "ShopOrder")
                        .WithMany("ShopOrderProducts")
                        .HasForeignKey("ShopOrderId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Mugi.Domain.Entities.ShopOrderSubProduct", b =>
                {
                    b.HasOne("Mugi.Domain.Entities.ShopOrder", "ShopOrder")
                        .WithMany("ShopOrderSubProducts")
                        .HasForeignKey("ShopOrderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mugi.Domain.Entities.SubProduct", "SubProduct")
                        .WithMany("ShopOrderSubProducts")
                        .HasForeignKey("SubProductId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Mugi.Domain.Entities.Staff", b =>
                {
                    b.HasOne("Mugi.Domain.Entities.Account", "Account")
                        .WithMany("Staffs")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Mugi.Domain.Entities.SubCategory", b =>
                {
                    b.HasOne("Mugi.Domain.Entities.Category", "Category")
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Mugi.Domain.Entities.SubProduct", b =>
                {
                    b.HasOne("Mugi.Domain.Entities.Product", "Product")
                        .WithMany("SubProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
